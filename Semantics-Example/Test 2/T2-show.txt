package ucf.spark.semantics {
  class tem extends scala.AnyRef {

    <paramaccessor> private[this] val input: String = _;

    def <init>(input: String): ucf.spark.semantics.tem = {
      tem.super.<init>();
      ()
    };

    private[this] var _input: String = tem.this.input;

    <accessor> private def _input: String = tem.this._input;

    <accessor> private def _input_=(x$1: String): Unit = tem.this._input = x$1;

    def getInput: String = this._input;

    def setInput(newValue: String): String = {
      val oldValue: String = this.getInput;
      this._input_=(newValue);
      oldValue
    }

  };

  object ScalaApp extends scala.AnyRef {
    def <init>(): ucf.spark.semantics.ScalaApp.type = {
      ScalaApp.super.<init>();
      ()
    };

    def printHello(): Unit = scala.this.Predef.println("Hello World from Scala");

    def main(args: Array[String]): Unit = {
      val temp: ucf.spark.semantics.tem = new tem("Bing");
      scala.this.Predef.println("Old:".+(temp.setInput()).<$plus: error>("New: ").<$plus: error>(temp.getInput));
      ScalaApp.this.printHello()
    }
  }
}
